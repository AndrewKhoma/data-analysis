res1 <- cor.mtest(mtcars, conf.level = .95)
res2 <- cor.mtest(mtcars, conf.level = .99)
# specialized the insignificant value according to the significant level
corrplot(
M,
p.mat = res1$p,
sig.level = .05,
order = "hclust",
addrect = 3
)
cor.test(mtcars$mpg, mtcars$cyl)
# install.packages("corrplot")
library(corrplot)
# load built-in dataset mtcars
M <- cor(mtcars)
# M
res1 <- cor.mtest(mtcars, conf.level = .95)
res2 <- cor.mtest(mtcars, conf.level = .99)
# specialized the insignificant value according to the significant level
corrplot.mixed(
M,
p.mat = res1$p,
sig.level = .05,
order = "hclust",
addrect = 3
)
cor.test(mtcars$mpg, mtcars$cyl)
# specialized the insignificant value according to the significant level
corrplot.mixed(
M,
upper = "circle",
p.mat = res1$p,
sig.level = .05,
order = "hclust",
addrect = 3
)
# install.packages("corrplot")
library(corrplot)
# load built-in dataset mtcars
M <- cor(mtcars)
# M
res1 <- cor.mtest(mtcars, conf.level = .95)
res2 <- cor.mtest(mtcars, conf.level = .99)
# specialized the insignificant value according to the significant level
corrplot.mixed(
M,
upper = "circle",
lower.col = "black",
p.mat = res1$p,
sig.level = .05,
order = "hclust",
addrect = 3
)
cor.test(mtcars$mpg, mtcars$cyl)
# install.packages("corrplot")
library(corrplot)
# load built-in dataset mtcars
M <- cor(mtcars)
# M
res1 <- cor.mtest(mtcars, conf.level = .95)
res2 <- cor.mtest(mtcars, conf.level = .99)
# specialized the insignificant value according to the significant level
corrplot(
M,
p.mat = res1$p,
sig.level = .05,
order = "hclust",
addrect = 3
)
cor.test(mtcars$mpg, mtcars$cyl)
source('C:/Users/NikitaSkybytskyi/Desktop/data-analysis/labs/lab-2/lab_2.R')
# install.packages("corrplot")
library(corrplot)
# load built-in dataset mtcars
M <- cor(mtcars)
# M
res1 <- cor.mtest(mtcars, conf.level = .95)
res2 <- cor.mtest(mtcars, conf.level = .99)
# specialized the insignificant value according to the significant level
corrplot(
M,
p.mat = res1$p,
sig.level = .05,
order = "hclust",
addrect = 3
)
cor.test(
mtcars$mpg,
mtcars$cyl,
alternative = "two.sided",
method = "pearson",
conf.level = 0.95
)
cor.test(
mtcars$mpg,
mtcars$cyl,
alternative = "greater",
method = "kendall",
conf.level = 0.9
)
cor.test(
mtcars$mpg,
mtcars$cyl,
alternative = "less",
method = "spearman",
conf.level = 0.8
)
cor.test(
mtcars$mpg,
mtcars$cyl,
alternative = "two.sided",
method = "pearson",
conf.level = 0.95
)
cor.test(
mtcars$mpg,
mtcars$cyl,
alternative = "greater",
method = "kendall",
conf.level = 0.9
)
cor.test(
mtcars$mpg,
mtcars$cyl,
alternative = "greater",
method = "kendall",
conf.level = 0.9,
exact = FALSE
)
cor.test(
mtcars$mpg,
mtcars$cyl,
alternative = "less",
method = "kendall",
conf.level = 0.9,
exact = FALSE
)
cor.test(
mtcars$mpg,
mtcars$cyl,
alternative = "two.sided",
method = "pearson",
conf.level = 0.95
)
cor.test(
mtcars$mpg,
mtcars$cyl,
alternative = "less",
method = "spearman",
conf.level = 0.8,
exact = FALSE
)
library(tidyverse)
# plot
cars
# one variable regression
ggplot(data = cars, aes(x = speed, y = dist)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
# build model
lm.res = lm(formula = dist~speed, data = cars)
summary(lm.res)
#residuals
qqnorm(lm.res$residuals)
qqline(lm.res$residuals)
#residuals
qqnorm(lm.res$residuals)
qqline(lm.res$residuals)
ggplot(data = lm.res, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point()
#build model
lm.res.lin = lm(formula = dist~speed-1, data = cars)
summary(lm.res.lin)
#residuals
qqnorm(lm.res.lin$residuals)
qqline(lm.res.lin$residuals)
#residuals
qqnorm(lm.res.lin$residuals)
qqline(lm.res.lin$residuals)
#residuals
qqline(lm.res.lin$residuals)
ggplot(data = lm.res, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point()
ggplot(data = lm.res.lin, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
ggplot(data = lm.res.lin, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
ggplot(data = lm.res.lin, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
#build model
lm.res.lin = lm(formula = dist~speed-1, data = cars)
#residuals
qqline(lm.res.lin$residuals)
#residuals
qqline(lm.res.lin$residuals)
ggplot(data = lm.res.lin, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
#residuals
qqline(lm.res.lin$residuals)
ggplot(data = lm.res.lin, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
ggplot(data = lm.res.lin, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
ggplot(data = lm.res.lin, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
cor.test(x = lm.res$fitted, y = lm.res$residuals)
library(tidyverse)
# plot
cars
# one variable regression
ggplot(data = cars, aes(x = speed, y = dist)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
# build model
lm.res = lm(formula = dist~speed, data = cars)
summary(lm.res)
#residuals
qqline(lm.res$residuals)
ggplot(data = lm.res, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point()
ggplot(data = lm.res, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point()
# one variable regression
ggplot(data = cars, aes(x = speed, y = dist)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
# build model
lm.res = lm(formula = dist~speed, data = cars)
summary(lm.res)
#residuals
qqline(lm.res$residuals)
ggplot(data = lm.res, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point()
ggplot2(data = lm.res, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point()
ggplot(data = lm.res, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point()
clear
library(tidyverse)
# plot
cars
# one variable regression
ggplot(data = cars, aes(x = speed, y = dist)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
lm.res = lm(formula = dist~speed, data = cars)
summary(lm.res)
# residuals
qqline(lm.res$residuals)
# residuals
qqline(lm.res$residuals)
# residuals
qqplot(lm.res$residuals)
# residuals
qqplot(lm.res$residuals)
qqline(lm.res$residuals)
library(tidyverse)
#one variable regression
#plot
cars
ggplot(data = cars,aes(x = speed, y = dist)) + geom_point() + geom_smooth(method="lm", se =F)
lm.res = lm(formula = dist~speed, data = cars)
summary(lm.res)
# residuals
qqnorm(lm.res$residuals)
qqline(lm.res$residuals)
ggplot(data = lm.res, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point()
ggplot(data = lm.res, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point()
qqline(lm.res$residuals)
qqline(lm.res$residuals)
qqnorm(lm.res$residuals)
qqline(lm.res$residuals)
qqnorm(lm.res$residuals)
qqline(lm.res$residuals)
ggplot(data = lm.res, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point()
# one variable regression plot
ggplot(data = cars, aes(x = speed, y = dist)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
# one variable regression plot
ggplot(data = cars, aes(x = speed, y = dist)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
qqnorm(lm.res$residuals)
qqline(lm.res$residuals)
ggplot(data = lm.res, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point()
lm.res.lin = lm(formula = dist~speed-1, data = cars)
summary(lm.res.lin)
qqnorm(lm.res.lin$residuals)
qqline(lm.res.lin$residuals)
ggplot(data = lm.res.lin, aes(x = lm.res$fitted, y = lm.res$residuals)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
cor.test(x = lm.res$fitted, y = lm.res$residuals)
# multivariate linear model
leaf.data = read.csv(file = "C:/Users/NikitaSkybytskyi/Desktop/data-analysis/leafshape.csv", stringsAsFactors = FALSE)
names(leaf.data)
leaf.data[,2:4]
pairs(leaf.data[,2:4], cols = 3)
lm.leaf = lm(formula = petiole~bladelen + bladewid, data = leaf.data)
pairs(leaf.data[,2:4], cols = 3)
warnings()
lm.leaf = lm(formula = petiole~bladelen + bladewid, data = leaf.data)
summary(lm.leaf)
qqnorm(lm.leaf$residuals)
qqline(lm.leaf$residuals)
ggplot(data = lm.leaf,aes(x = lm.leaf$fitted, y = lm.leaf$residuals)) + geom_point() + geom_smooth(method="lm", se = F)#+ coord_cartesian(xlim = c(-5, 5), ylim = c(-3, 10))
ggplot(data = lm.leaf,aes(x = lm.leaf$fitted, y = lm.leaf$residuals)) + geom_point() + geom_smooth(method="lm", se = F)#+ coord_cartesian(xlim = c(-5, 5), ylim = c(-3, 10))
ggplot(data = lm.leaf, aes(x = lm.leaf$fitted, y = lm.leaf$residuals)) + geom_point() + geom_smooth(method = "lm", se = FALSE)+ coord_cartesian(xlim = c(-5, 5), ylim = c(-3, 10))
ggplot(data = lm.leaf, aes(x = lm.leaf$fitted, y = lm.leaf$residuals)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
load()
load(UCBAdmissions)
UCBAdmissions
class(UCBAdmissions)
ChickWeight
Orange
max(ChickWeight[,3])
max(ChickWeight[,3])
salaries = read.csv(file = "C:/Users/NikitaSkybytskyi/Desktop/data-analysis/labs/lab-4/Salaries.csv", header = TRUE, stringsAsFactors = TRUE)
salaries
salaries = read.csv(file = "C:/Users/NikitaSkybytskyi/Desktop/data-analysis/labs/lab-4/Salaries.csv", header = TRUE, sep=";", stringsAsFactors = TRUE)
salaries
clear
salaries = read.csv(file = "C:/Users/NikitaSkybytskyi/Desktop/data-analysis/labs/lab-4/Salaries.csv", header = TRUE, sep=";", stringsAsFactors = TRUE)
salaries
#building model
summary(aov(formula = salary~rank, data = salaries))
summary(aov(formula = salary~sex, data = salaries))
summary(aov(formula = salary~rank+sex+sex:rank, data = salaries))
class(salaries[,"rank"])
unique(salaries[,"rank"])
library("TTR")
library("TTR")
install.packages("TTR")
library("TTR")
library("forecast")
install.packages("forecast")
library("forecast")
# plot
my.ts = USAccDeaths
plot.ts(my.ts)
smoothed = SMA(my.ts, n = 2)
plot.ts(smoothed)
comp = decompose(smoothed)
plot(comp)
sm.fcst = HoltWinters(x = my.ts, beta = FALSE, gamma = FALSE)
plot(sm.fcst)
sm.fcst2 = forecast(sm.fcst, h = 10)
sm.fcst2$residuals
plot(sm.fcst2)
sm.fcst2$residuals[1] = -1000
length(sm.fcst2$residuals)
acf(sm.fcst2$residuals, lag.max = 72)
1 + 2
3 - 4
4 * 5
6 / 7
8^9
library(splines)
library(abctools)
install.packages("abctools")
library(abctools)
7 * (3 + 12) / 2 - 7^2
# install tidyverse:
# install.packages("tidyverse")
# import tidyverse:
library(tidyverse)
# for kurtosis function:
# install.packages("e1071")
library(e1071)
# change working directory to that of cats.csv:
# setwd("C:/Users/NikitaSkybytskyi/Desktop/data-analysis/labs/lab-1")
# read .csv with header and store in memory as norm.data
norm.data <- read.csv(file = "cats.csv", header = TRUE, stringsAsFactors = FALSE)
# norm.data
# Bwt is body weight and Hwt is heart weight:
x <- norm.data$Hwt
# x
# we will sort x to simplify further plotting:
x.sorted = sort(x)
# x.sorted
# basic stat for further usage:
stats <- data.frame(mean = mean(x), sd = sd(x), range = range(x))
# histogram
hist(x, breaks = 20)
# box plot
boxplot(x, horizontal = TRUE, col = "yellow")
# q-q plot
ggplot(data = norm.data, mapping = aes(sample = x)) + stat_qq() + stat_qq_line()
# p-p plot
x.ecdf = ecdf(x.sorted)
ggplot(
data = norm.data,
mapping = aes(x = x.ecdf(x.sorted), y = pnorm(q = x.sorted, mean = stats$mean, sd = stats$sd))
) + geom_point() + geom_abline(intercept = 0, slope = 1, size = 1)
cat(sprintf("Mean = %.4f\n", stats$mean))
# Mean = 10.6306
cat(sprintf("Median = %.4f\n", median(x)))
# Median = 10.1000
# Mode is not applicable
cat(sprintf("Variance = %.4f\n", var(x)))
# Variance = 5.9275
cat(sprintf("Standard deviation = %.4f\n", stats$sd))
# Standard deviation = 2.4346
cat(sprintf("Coefficient of variation = %.4f\n", stats$sd / stats$mean))
# Coefficient of variation = 0.2290
cat(sprintf("Min value = %.4f\n", stats$range[1]))
# Min value = 6.3000
cat(sprintf("Max value = %.4f\n", stats$range[2]))
# Max value = 20.5000
cat(sprintf("Range = %.4f\n", diff(stats$range)))
# Range of sample = 14.2000
cat(sprintf("Skewness = %.4f\n", skewness(x)))
# Skewness = 0.8214
cat(sprintf("Kurtosis = %.4f\n", kurtosis(x)))
# Kurtosis = 1.0253
# change working directory to that of cats.csv:
setwd("C:/Users/NikitaSkybytskyi/Desktop/data-analysis/labs/lab-1")
# install tidyverse:
# install.packages("tidyverse")
# import tidyverse:
library(tidyverse)
# for kurtosis function:
# install.packages("e1071")
library(e1071)
# change working directory to that of cats.csv:
# setwd("C:/Users/NikitaSkybytskyi/Desktop/data-analysis/labs/lab-1")
# read .csv with header and store in memory as norm.data
norm.data <- read.csv(file = "cats.csv", header = TRUE, stringsAsFactors = FALSE)
# norm.data
# Bwt is body weight and Hwt is heart weight:
x <- norm.data$Hwt
# x
# we will sort x to simplify further plotting:
x.sorted = sort(x)
# x.sorted
# basic stat for further usage:
stats <- data.frame(mean = mean(x), sd = sd(x), range = range(x))
# histogram
hist(x, breaks = 20)
# box plot
boxplot(x, horizontal = TRUE, col = "yellow")
# q-q plot
ggplot(data = norm.data, mapping = aes(sample = x)) + stat_qq() + stat_qq_line()
# p-p plot
x.ecdf = ecdf(x.sorted)
ggplot(
data = norm.data,
mapping = aes(x = x.ecdf(x.sorted), y = pnorm(q = x.sorted, mean = stats$mean, sd = stats$sd))
) + geom_point() + geom_abline(intercept = 0, slope = 1, size = 1)
cat(sprintf("Mean = %.4f\n", stats$mean))
# Mean = 10.6306
cat(sprintf("Median = %.4f\n", median(x)))
# Median = 10.1000
# Mode is not applicable
cat(sprintf("Variance = %.4f\n", var(x)))
# Variance = 5.9275
cat(sprintf("Standard deviation = %.4f\n", stats$sd))
# Standard deviation = 2.4346
cat(sprintf("Coefficient of variation = %.4f\n", stats$sd / stats$mean))
# Coefficient of variation = 0.2290
cat(sprintf("Min value = %.4f\n", stats$range[1]))
# Min value = 6.3000
cat(sprintf("Max value = %.4f\n", stats$range[2]))
# Max value = 20.5000
cat(sprintf("Range = %.4f\n", diff(stats$range)))
# Range of sample = 14.2000
cat(sprintf("Skewness = %.4f\n", skewness(x)))
# Skewness = 0.8214
cat(sprintf("Kurtosis = %.4f\n", kurtosis(x)))
# Kurtosis = 1.0253
# install tidyverse:
# install.packages("tidyverse")
# import tidyverse:
library(tidyverse)
# for kurtosis function:
# install.packages("e1071")
library(e1071)
# change working directory to that of cats.csv:
# setwd("C:/Users/NikitaSkybytskyi/Desktop/data-analysis/labs/lab-1")
# read .csv with header and store in memory as norm.data
norm.data <- read.csv(file = "cats.csv", header = TRUE, stringsAsFactors = FALSE)
# norm.data
# Bwt is body weight and Hwt is heart weight:
x <- norm.data$Hwt
# x
# we will sort x to simplify further plotting:
x.sorted = sort(x)
# x.sorted
# basic stat for further usage:
stats <- data.frame(mean = mean(x), sd = sd(x), range = range(x))
# histogram
hist(x, breaks = 20)
# box plot
boxplot(x, horizontal = TRUE, col = "yellow")
# q-q plot
ggplot(data = norm.data, mapping = aes(sample = x)) + stat_qq() + stat_qq_line()
# p-p plot
x.ecdf = ecdf(x.sorted)
ggplot(
data = norm.data,
mapping = aes(x = x.ecdf(x.sorted), y = pnorm(q = x.sorted, mean = stats$mean, sd = stats$sd))
) + geom_point() + geom_abline(intercept = 0, slope = 1, size = 1)
cat(sprintf("Mean = %.4f\n", stats$mean))
# Mean = 10.6306
cat(sprintf("Median = %.4f\n", median(x)))
# Median = 10.1000
# Mode is not applicable
cat(sprintf("Variance = %.4f\n", var(x)))
# Variance = 5.9275
cat(sprintf("Standard deviation = %.4f\n", stats$sd))
# Standard deviation = 2.4346
cat(sprintf("Coefficient of variation = %.4f\n", stats$sd / stats$mean))
# Coefficient of variation = 0.2290
cat(sprintf("Min value = %.4f\n", stats$range[1]))
# Min value = 6.3000
cat(sprintf("Max value = %.4f\n", stats$range[2]))
# Max value = 20.5000
cat(sprintf("Range = %.4f\n", diff(stats$range)))
# Range of sample = 14.2000
cat(sprintf("Skewness = %.4f\n", skewness(x)))
# Skewness = 0.8214
cat(sprintf("Kurtosis = %.4f\n", kurtosis(x)))
# Kurtosis = 1.0253> x <- c(2, 3, 4, 1)
> y <- c(1, 1, 1, 10)
x <- c(2, 3, 4, 1)
y <- c(1, 1, 1, 10)
rbind(x, y)
cbind(x, y)
x<-c(-100,0,1,5,-9,8,4)
y<-c(1,2)
y+x
x <- rnorm(1000, mean = 100, sd = 15)
hist(x, probability = TRUE)
xx <- seq(min(x), max(x), length = 100)
lines(xx, dnorm(xx, mean = 100, sd = 15))
x <- rnorm(1000, mean = 100, sd = 15)
hist(x, probability = TRUE)
xx <- seq(min(x), max(x), length = 100)
lines(xx, dnorm(xx, mean = 100, sd = 15))
